cluster:
  name: test-cluster
externalServices:
  prometheus:
    host: https://prometheus-us-central1.grafana.net
    secret:
      create: false
      name: grafana-cloud-credentials-metrics
      namespace: alloy
  loki:
    host: https://logs-prod-017.grafana.net
    secret:
      create: false
      name: grafana-cloud-credentials-logs
      namespace: alloy
  tempo:
    host: https://tempo-us-central1.grafana.net:443
    secret:
      create: false
      name: grafana-cloud-credentials-traces
      namespace: alloy
metrics:
  enabled: true
  cost:
    enabled: true
  node-exporter:
    enabled: true
logs:
  enabled: true
  pod_logs:
    enabled: true
  cluster_events:
    enabled: true
traces:
  enabled: true
receivers:
  grpc:
    enabled: true
  http:
    enabled: true
  zipkin:
    enabled: true
opencost:
  enabled: true
  opencost:
    exporter:
      defaultClusterId: test-cluster
    prometheus:
      existingSecretName: grafana-cloud-credentials-metrics
      external:
        url: https://prometheus-us-central1.grafana.net/api/prom
kube-state-metrics:
  enabled: true
prometheus-node-exporter:
  enabled: true
prometheus-operator-crds:
  enabled: true
alloy: {}
alloy-events: {}
alloy-logs: {}
extraConfig: |-
  // read the messages on the events topic and send to a local loki server
  loki.source.kafka "kafka_source" {
    brokers = ["eventstore-kafka-bootstrap.eventstore:9092"]
    topics = ["events"]
    labels = {component = "loki.source.kafka"}
    forward_to = [loki.write.logs_service.receiver]
    use_incoming_timestamp = true
    relabel_rules = loki.relabel.kafka.rules
  }
  loki.relabel "kafka" {
    forward_to = [loki.write.logs_service.receiver]
    rule {
      source_labels = ["__meta_kafka_topic"]
      target_label = "topic"
    }
    rule {
      source_labels = ["__meta_kafka_message_key"]
      target_label = "message_key"
    }
  }
  discovery.relabel "loki" {
    targets = discovery.kubernetes.services.targets
    rule {
        source_labels = ["__meta_kubernetes_service_label_app_kubernetes_io_instance"]
        regex = "search"
        action = "keep"
    }
    rule {
        source_labels = ["__meta_kubernetes_service_port_number"]
        regex = "3100"
        action = "keep"
    }
    rule {
        source_labels = ["__meta_kubernetes_pod_name"]
        target_label = "instance"
    }
  }
  prometheus.scrape "loki" {
      job_name     = "integrations/loki"
      targets      = discovery.relabel.loki.output
      honor_labels = true
      forward_to   = [prometheus.relabel.metrics_service.receiver]
  }
  discovery.relabel "dragonflydb" {
    targets = discovery.kubernetes.services.targets
    rule {
        source_labels = ["__meta_kubernetes_service_label_app_kubernetes_io_instance"]
        regex = "dragonflydb"
        action = "keep"
    }
    rule {
        source_labels = ["__meta_kubernetes_service_port_number"]
        regex = "6379"
        action = "keep"
    }
    rule {
        source_labels = ["__meta_kubernetes_pod_name"]
        target_label = "instance"
    }
  }
  prometheus.scrape "dragonflydb" {
      job_name     = "integrations/dragonflydb"
      targets      = discovery.relabel.dragonflydb.output
      honor_labels = true
      forward_to   = [prometheus.relabel.metrics_service.receiver]
  }