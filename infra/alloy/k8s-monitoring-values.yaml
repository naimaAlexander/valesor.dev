cluster:
  name: test-cluster
externalServices:
  prometheus:
    host: https://prometheus-us-central1.grafana.net
    secret:
      create: false
      name: grafana-cloud-credentials-metrics
      namespace: alloy
  loki:
    host: https://logs-prod-017.grafana.net
    secret:
      create: false
      name: grafana-cloud-credentials-logs
      namespace: alloy
  tempo:
    host: https://tempo-us-central1.grafana.net:443
    secret:
      create: false
      name: grafana-cloud-credentials-traces
      namespace: alloy
metrics:
  enabled: true
  cost:
    enabled: true
  node-exporter:
    enabled: true
logs:
  enabled: true
  pod_logs:
    enabled: true
  cluster_events:
    enabled: true
traces:
  enabled: true
receivers:
  grpc:
    enabled: true
  http:
    enabled: true
  zipkin:
    enabled: true
opencost:
  enabled: true
  opencost:
    exporter:
      defaultClusterId: test-cluster
    prometheus:
      existingSecretName: grafana-cloud-credentials-metrics
      external:
        url: https://prometheus-us-central1.grafana.net/api/prom
kube-state-metrics:
  enabled: true
prometheus-node-exporter:
  enabled: true
prometheus-operator-crds:
  enabled: true
alloy: {}
alloy-events: {}
alloy-logs: {}
extraConfig: |-
  // loki.source.kafka "kafka_source" {
  //   brokers = ["eventstore-kafka-bootstrap.eventstore:9092"]
  //   topics = ["events"]
  //   labels = {component = "loki.source.kafka"}
  //   forward_to = [loki.write.logs_service.receiver]
  //   use_incoming_timestamp = true
  //   relabel_rules = loki.relabel.kafka.rules
  // }
  // loki.relabel "kafka" {
  //   forward_to = [loki.write.logs_service.receiver]
  //   rule {
  //     source_labels = ["__meta_kafka_topic"]
  //     target_label = "topic"
  //   }
  //   rule {
  //     source_labels = ["__meta_kafka_message_key"]
  //     target_label = "message_key"
  //   }
  // }
  otelcol.receiver.kafka "default" {
    brokers          = ["eventstore-kafka-bootstrap.eventstore:9092"]
    protocol_version = "2.0.0"
     
    topic = "events"
    group_id = "events-test-group"
    client_id = "events-test-group"
    encoding = "json"

    output {
      logs    = [otelcol.processor.attributes.bancogalacia.input]
    }
  }
  otelcol.processor.attributes "bancogalacia" {
    action {
      key = "topic"
      value = "events"
      action = "insert"
    }
    output {
      logs    = [otelcol.processor.k8sattributes.bancogalacia.input]
    }
  }
  otelcol.processor.k8sattributes "bancogalacia" {
    output {
      logs    = [otelcol.exporter.loki.kafka_logs.input]
    }
  }
  otelcol.exporter.loki "kafka_logs" {
    forward_to = [loki.write.logs_service.receiver]
  }