# These values configure the Grafana Mimir or Grafana Enterprise Metrics cluster
# for a more production-ready setup. The setup targets 70% CPU and memory utilization
# so that the cluster has room to grow. The resource requests and limits reflect 100% utilization.
# This is useful when you want to strictly control costs when purchasing GEM through a marketplace subscription for example.
# limits==requests also ensure a "Guaranteed" QoS: https://kubernetes.io/docs/tasks/configure-pod-container/quality-service-pod/.
# Note that setting CPU limits has some known issues:
# https://engineering.indeedblog.com/blog/2019/12/unthrottled-fixing-cpu-limits-in-the-cloud/.
#
# These values are suitable for ingestion of ~1M series and scrape interval of 15s.
# This implies ingestion rate of around 66000 samples per second.
#
# Query requirements can vary dramatically depending on query rate and query
# ranges. The values here satisfy a "usual" query load of around 5 queries per second
# as seen from our production clusters at this scale.
#
# The values in this file also add podAntiAffinity rules for ingesters and store-gateways.
# The rules ensure that the replicas of the same component are not scheduled on the same
# Kubernetes Node. Zone-aware replication is enabled by default on new installation.
# Refer to [Migrate from single zone to zone-aware replication with Helm](https://grafana.com/docs/mimir/latest/migration-guide/migrating-from-single-zone-with-helm) and
# [Zone-Aware Replication](https://grafana.com/docs/mimir/latest/configure/configure-zone-aware-replication/)
# for more information.
#
# MinIO is no longer enabled, and you are encouraged to use your cloud providers
# object storage service such as S3 or GCS.

global:
  extraEnvFrom:
    - secretRef:
        name: mimir-bucket-secret
  podAnnotations:
    bucketSecretVersion: "0"

metaMonitoring:
  serviceMonitor:
    enabled: true
  grafanaAgent:
    enabled: false

# This turns of the built-in MinIO support
minio:
  enabled: false

mimir:
  structuredConfig:
    # Uncomment when using Grafana Enterprise Metrics
    # admin_client:
    #   storage:
    #     s3:
    #       bucket_name: mimir-admin
    #       access_key_id: ${AWS_ACCESS_KEY_ID}
    #       endpoint: "s3-infra-hl.minio-tenant.svc.cluster.local:9000"
    #       secret_access_key: ${AWS_SECRET_ACCESS_KEY}
    alertmanager_storage:
      backend: s3
      s3:
        bucket_name: mimir-alertmanager
        access_key_id: ${AWS_ACCESS_KEY_ID}
        endpoint: "minio.minio-tenant.svc.cluster.local"
        secret_access_key: ${AWS_SECRET_ACCESS_KEY}
        http:
          insecure_skip_verify: true
    blocks_storage:
      backend: s3
      s3:
        bucket_name: mimir-blocks
        access_key_id: ${AWS_ACCESS_KEY_ID}
        endpoint: "minio.minio-tenant.svc.cluster.local"
        secret_access_key: ${AWS_SECRET_ACCESS_KEY}
        http:
          insecure_skip_verify: true
    ruler_storage:
      backend: s3
      s3:
        bucket_name: mimir-ruler
        access_key_id: ${AWS_ACCESS_KEY_ID}
        endpoint: "minio.minio-tenant.svc.cluster.local"
        secret_access_key: ${AWS_SECRET_ACCESS_KEY}
        http:
          insecure_skip_verify: true

alertmanager:
  persistentVolume:
    enabled: true
  replicas: 2
  resources:
    limits:
      cpu: 1.4
      memory: 1.4Gi
    requests:
      cpu: 1.4
      memory: 1.4Gi
  statefulSet:
    enabled: true

compactor:
  persistentVolume:
    size: 20Gi
  resources:
    limits:
      cpu: 1.4
      memory: 2.1Gi
    requests:
      cpu: 1.4
      memory: 2.1Gi

distributor:
  replicas: 2
  resources:
    limits:
      cpu: 3.5
      memory: 5.7Gi
    requests:
      cpu: 3.5
      memory: 5.7Gi

ingester:
  persistentVolume:
    size: 50Gi
  replicas: 3
  resources:
    limits:
      cpu: 5
      memory: 12Gi
    requests:
      cpu: 5
      memory: 12Gi
  topologySpreadConstraints: {}
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
              - key: target # support for enterprise.legacyLabels
                operator: In
                values:
                  - ingester
          topologyKey: 'kubernetes.io/hostname'

        - labelSelector:
            matchExpressions:
              - key: app.kubernetes.io/component
                operator: In
                values:
                  - ingester
          topologyKey: 'kubernetes.io/hostname'
  zoneAwareReplication:
    topologyKey: 'kubernetes.io/hostname'

admin-cache:
  enabled: true
  replicas: 2

chunks-cache:
  enabled: true
  replicas: 2

index-cache:
  enabled: true
  replicas: 3

metadata-cache:
  enabled: true

results-cache:
  enabled: true

minio:
  enabled: false

overrides_exporter:
  replicas: 1
  resources:
    limits:
      cpu: 100m
      memory: 128Mi
    requests:
      cpu: 100m
      memory: 128Mi

querier:
  replicas: 1
  resources:
    limits:
      cpu: 2.8
      memory: 5600Mi
    requests:
      cpu: 2.8
      memory: 5600Mi

query_frontend:
  replicas: 1
  resources:
    limits:
      cpu: 2.8
      memory: 2800Mi
    requests:
      cpu: 2.8
      memory: 2800Mi

ruler:
  replicas: 1
  resources:
    limits:
      cpu: 1.4
      memory: 2800Mi
    requests:
      cpu: 1.4
      memory: 2800Mi

store_gateway:
  persistentVolume:
    size: 10Gi
  replicas: 3
  resources:
    limits:
      cpu: 1.4
      memory: 2100Mi
    requests:
      cpu: 1.4
      memory: 2100Mi
  topologySpreadConstraints: {}
  affinity:
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
              - key: target # support for enterprise.legacyLabels
                operator: In
                values:
                  - store-gateway
          topologyKey: 'kubernetes.io/hostname'

        - labelSelector:
            matchExpressions:
              - key: app.kubernetes.io/component
                operator: In
                values:
                  - store-gateway
          topologyKey: 'kubernetes.io/hostname'

  zoneAwareReplication:
    topologyKey: 'kubernetes.io/hostname'

nginx:
  replicas: 1
  resources:
    limits:
      cpu: 1.4
      memory: 731Mi
    requests:
      cpu: 1.4
      memory: 731Mi

# Grafana Enterprise Metrics feature related
admin_api:
  replicas: 1
  resources:
    limits:
      cpu: 200m
      memory: 128Mi
    requests:
      cpu: 200m
      memory: 128Mi

gateway:
  replicas: 1
  resources:
    limits:
      cpu: 1.4
      memory: 731Mi
    requests:
      cpu: 1.4
      memory: 731Mi
